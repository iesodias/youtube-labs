name: Deploy Bicep to Azure

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: üîé Validar Bicep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar o Bicep
        run: az bicep install

      - name: Criar Resource Group Tempor√°rio
        run: az group create --name bicep-validation-tmp --location eastus

      - name: Validar Template Bicep
        run: |
          az deployment group validate \
            --resource-group bicep-validation-tmp \
            --template-file main.bicep \
            --parameters adminPassword=${{ secrets.ADMIN_PASSWORD }}

      - name: What-If (Pr√©via da implanta√ß√£o)
        run: |
          az deployment group what-if \
            --resource-group bicep-validation-tmp \
            --template-file main.bicep \
            --parameters adminPassword=${{ secrets.ADMIN_PASSWORD }}

      - name: Remover Resource Group Tempor√°rio
        if: always()
        run: az group delete --name bicep-validation-tmp --yes --no-wait

  deploy:
    name: üöÄ Deploy e Configura√ß√£o
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      vmName: ${{ steps.deploy_bicep.outputs.vmName }}
      adminUsername: ${{ steps.deploy_bicep.outputs.adminUsername }}
      publicIP: ${{ steps.deploy_bicep.outputs.publicIP }}
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar o Bicep
        run: az bicep install

      - name: Verificar e Criar Grupo de Recursos
        run: |
          if [ "$(az group exists --name bicep-rg)" = "false" ]; then
            az group create --name bicep-rg --location eastus
          else
            echo "Grupo de recursos 'bicep-rg' j√° existe."
          fi

      - name: Implantar Bicep e Capturar Outputs
        id: deploy_bicep
        run: |
          outputs=$(az deployment group create \
            --resource-group bicep-rg \
            --template-file main.bicep \
            --parameters adminPassword=${{ secrets.ADMIN_PASSWORD }} \
            --query properties.outputs)
          echo "$outputs" > bicep_outputs.json
          echo "vmName=$(jq -r '.vmName.value' bicep_outputs.json)" >> $GITHUB_OUTPUT
          echo "adminUsername=$(jq -r '.adminUsername.value' bicep_outputs.json)" >> $GITHUB_OUTPUT
          echo "publicIP=$(jq -r '.publicIP.value' bicep_outputs.json)" >> $GITHUB_OUTPUT

      - name: Definir Vari√°veis de Ambiente
        run: |
          vmName=$(jq -r '.vmName.value' bicep_outputs.json)
          adminUsername=$(jq -r '.adminUsername.value' bicep_outputs.json)
          publicIP=$(jq -r '.publicIP.value' bicep_outputs.json)
          echo "VM_NAME=$vmName" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=$adminUsername" >> $GITHUB_ENV
          echo "PUBLIC_IP=$publicIP" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh $adminUsername@$publicIP" >> $GITHUB_ENV

      - name: Instalar Ansible e sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: Criar Invent√°rio Ansible
        run: |
          echo "[vm]" > inventory
          echo "$PUBLIC_IP ansible_user=$ADMIN_USERNAME ansible_password=${{ secrets.ADMIN_PASSWORD }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory

      - name: Executar Playbook Ansible para Instalar Docker
        run: |
          ansible-playbook -i inventory ansible/playbook.yaml --extra-vars "ansible_sudo_pass=${{ secrets.ADMIN_PASSWORD }}"

  post-tests:
    name: ‚úÖ P√≥s-Testes de Infra
    needs: deploy
    runs-on: ubuntu-latest
    env:
      PUBLIC_IP: ${{ needs.deploy.outputs.publicIP }}
      VM_NAME: ${{ needs.deploy.outputs.vmName }}
    steps:
      - name: Testar Swagger na Porta 8081
        run: |
          echo "Aguardando aplica√ß√£o subir com Swagger..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$PUBLIC_IP:8081/swagger-ui/index.html)
          if [ "$response" != "200" ]; then
            echo "‚ùå Swagger n√£o respondeu como esperado. Status HTTP: $response"
            exit 1
          else
            echo "‚úÖ Swagger dispon√≠vel em /swagger-ui/index.html na porta 8081!"
          fi

      - name: Verificar status da VM
        run: |
          status=$(az vm get-instance-view \
            --name "$VM_NAME" \
            --resource-group bicep-rg \
            --query "instanceView.statuses[?code=='PowerState/running'].displayStatus" \
            --output tsv)

          echo "Status da VM: $status"

          if [ "$status" != "VM running" ]; then
            echo "‚ùå A VM n√£o est√° em execu√ß√£o!"
            exit 1
          else
            echo "‚úÖ VM est√° rodando com sucesso!"
          fi

      - name: Verificar regra da NSG para porta 8081
        run: |
          result=$(az network nsg rule list \
            --nsg-name "$VM_NAME-nsg" \
            --resource-group bicep-rg \
            --query "[?destinationPortRange=='8081' && access=='Allow']")

          if [ "$result" = "[]" ]; then
            echo "‚ùå Porta 8081 n√£o est√° liberada na NSG!"
            exit 1
          else
            echo "‚úÖ Porta 8081 est√° liberada corretamente na NSG!"
          fi
